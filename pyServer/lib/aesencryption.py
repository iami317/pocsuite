# -*- coding: utf-8 -*-
import argparse
from binascii import b2a_hex, a2b_hex

from Crypto.Cipher import AES


# from Crypto import Random


class AesEncryption(object):
    def __init__(self, key, mode=AES.MODE_CFB):
        self.key = self.check_key(key)
        # 密钥key长度必须为16,24或者32bytes的长度
        self.mode = mode
        # self.iv = Random.new().read(AES.block_size)
        self.iv = b'\xbf\xe7\x87\xa9N\xf7\xc8\xa7\xd7\x94F\x91p-\t\xa4'

    def check_key(self, key):
        '检测key的长度是否为16,24或者32bytes的长度'
        try:
            if isinstance(key, bytes):
                assert len(key) in [16, 24, 32]
                return key
            elif isinstance(key, str):
                assert len(key.encode()) in [16, 24, 32]
                return key.encode()
            else:
                raise Exception(f'密钥必须为str或bytes,不能为{type(key)}')
        except AssertionError:
            print('输入的长度不正确')

    def check_data(self, data):
        '检测加密的数据类型'
        if isinstance(data, str):
            data = data.encode()
        elif isinstance(data, bytes):
            pass
        else:
            raise Exception(f'加密的数据必须为str或bytes,不能为{type(data)}')
        return data

    def encrypt(self, data):
        ' 加密函数 '
        data = self.check_data(data)
        cryptor = AES.new(self.key, self.mode, self.iv)
        return b2a_hex(cryptor.encrypt(data)).decode()

    def decrypt(self, data):
        ' 解密函数 '
        data = self.check_data(data)
        cryptor = AES.new(self.key, self.mode, self.iv)
        return cryptor.decrypt(a2b_hex(data)).decode()


if __name__ == '__main__':
    import os

    def cmd_parser():
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument(dest="files", nargs="?", help="文件或目录")
            parser.add_argument("--key", "-k", dest="key", default='huaun666huaun666', nargs="?",
                                help="必须为16、24、32位数字加字母 -k qweqweqweqweqweq")
            parser.add_argument("--ext", "-e", dest="ext", default='un', nargs="?", help="指定生成后缀名 -e txt")
            parser.add_argument("--name", "-n", dest="name", nargs="?", help="指定生成后文件夹 -n dir")
            arg = parser.parse_args()
            return arg
        except:
            pass


    target = cmd_parser().__dict__

    files = target.get("files")
    key = target.get("key")
    ext = target.get("ext")
    name = target.get("name") if target.get("name") else files + "_bak"


    def read_file(file):
        with open(file, "rb") as f:
            data = f.read()
        return data


    def write_file(file, data):
        try:
            with open(file, 'w') as f:
                f.write(data)
                print(f'生成文件{file}')
        except Exception as e:
            print(f"生成文件{file}失败 {e}")


    def exec_aes(files, type):
        aes = AesEncryption(key)

        if type == "dir":
            if not os.path.exists(name):
                os.mkdir(name)
                print(f"创建文件夹{name}")
            for root, dirs, fs in os.walk(files):
                for dir in dirs:
                    if dir.startswith('__'): continue
                    dir_path = os.path.join(root, dir).replace(files, name, 1)
                    if not os.path.exists(dir_path):
                        os.mkdir(dir_path)
                for file in fs:
                    if str(file).startswith('__'): continue
                    file_path = os.path.join(root, file)
                    data = read_file(file_path)
                    e = aes.encrypt(data)
                    new_name = file_path.replace('.py', '.un').replace(files, name, 1)
                    write_file(new_name, e)

        elif type == "file":
            data = read_file(files)
            e = aes.encrypt(data)
            new_name = files.replace('.py', '.un')
            write_file(new_name, e)

    # 判断是单个文件还是目录
    # if os.path.isdir(files):
    #     exec_aes(files, type="dir")
    # elif os.path.isfile(files):
    #     exec_aes(files, type="file")
    # else:
    #     print("输入正确的文件或目录")

    # key = "huaun666huaun666"
    # with open(os.path.join(os.getcwd(), "test.py"), "rb") as f:
    #     data = f.read()
    # print(data)
    # aes = AesEncryption("huaun666huaun666")
    # e = aes.encrypt(data)  # 调用加密函数
    # e = ""
    # d = aes.decrypt(e)  # 调用解密函数
    # print(e)
    # print(d)
