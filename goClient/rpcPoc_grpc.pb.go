// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: rpcPoc.proto

package pocsuite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallClient is the client API for Call service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallClient interface {
	// 执行
	ExecPythonSerialize(ctx context.Context, in *ExecPythonSerializeRequest, opts ...grpc.CallOption) (*ResultByte, error)
	// 校验
	CheckPythonSerialize(ctx context.Context, in *ExecPythonSerializeRequest, opts ...grpc.CallOption) (*ResultByte, error)
	// 测试
	HealthCheck(ctx context.Context, in *ResultByte, opts ...grpc.CallOption) (*ResultByte, error)
}

type callClient struct {
	cc grpc.ClientConnInterface
}

func NewCallClient(cc grpc.ClientConnInterface) CallClient {
	return &callClient{cc}
}

func (c *callClient) ExecPythonSerialize(ctx context.Context, in *ExecPythonSerializeRequest, opts ...grpc.CallOption) (*ResultByte, error) {
	out := new(ResultByte)
	err := c.cc.Invoke(ctx, "/Call/ExecPythonSerialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) CheckPythonSerialize(ctx context.Context, in *ExecPythonSerializeRequest, opts ...grpc.CallOption) (*ResultByte, error) {
	out := new(ResultByte)
	err := c.cc.Invoke(ctx, "/Call/CheckPythonSerialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) HealthCheck(ctx context.Context, in *ResultByte, opts ...grpc.CallOption) (*ResultByte, error) {
	out := new(ResultByte)
	err := c.cc.Invoke(ctx, "/Call/healthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallServer is the server API for Call service.
// All implementations must embed UnimplementedCallServer
// for forward compatibility
type CallServer interface {
	// 执行
	ExecPythonSerialize(context.Context, *ExecPythonSerializeRequest) (*ResultByte, error)
	// 校验
	CheckPythonSerialize(context.Context, *ExecPythonSerializeRequest) (*ResultByte, error)
	// 测试
	HealthCheck(context.Context, *ResultByte) (*ResultByte, error)
	mustEmbedUnimplementedCallServer()
}

// UnimplementedCallServer must be embedded to have forward compatible implementations.
type UnimplementedCallServer struct {
}

func (UnimplementedCallServer) ExecPythonSerialize(context.Context, *ExecPythonSerializeRequest) (*ResultByte, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecPythonSerialize not implemented")
}
func (UnimplementedCallServer) CheckPythonSerialize(context.Context, *ExecPythonSerializeRequest) (*ResultByte, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPythonSerialize not implemented")
}
func (UnimplementedCallServer) HealthCheck(context.Context, *ResultByte) (*ResultByte, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCallServer) mustEmbedUnimplementedCallServer() {}

// UnsafeCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallServer will
// result in compilation errors.
type UnsafeCallServer interface {
	mustEmbedUnimplementedCallServer()
}

func RegisterCallServer(s grpc.ServiceRegistrar, srv CallServer) {
	s.RegisterService(&Call_ServiceDesc, srv)
}

func _Call_ExecPythonSerialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecPythonSerializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).ExecPythonSerialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Call/ExecPythonSerialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).ExecPythonSerialize(ctx, req.(*ExecPythonSerializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_CheckPythonSerialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecPythonSerializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).CheckPythonSerialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Call/CheckPythonSerialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).CheckPythonSerialize(ctx, req.(*ExecPythonSerializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultByte)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Call/healthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).HealthCheck(ctx, req.(*ResultByte))
	}
	return interceptor(ctx, in, info, handler)
}

// Call_ServiceDesc is the grpc.ServiceDesc for Call service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Call_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Call",
	HandlerType: (*CallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecPythonSerialize",
			Handler:    _Call_ExecPythonSerialize_Handler,
		},
		{
			MethodName: "CheckPythonSerialize",
			Handler:    _Call_CheckPythonSerialize_Handler,
		},
		{
			MethodName: "healthCheck",
			Handler:    _Call_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcPoc.proto",
}
